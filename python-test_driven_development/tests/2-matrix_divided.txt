# Test cases

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Regular Test
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test present: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test present: each row of the matrix must have the same size
>>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test present: div must be a number
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "not a number")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test present: div can't be equal to 0
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test present: matrix= list of lists of integers / div= float(inf) => all values == 0.0
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test present: missing one argument
>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test present: missing 2 arguments
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
